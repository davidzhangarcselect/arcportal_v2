generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  email               String        @unique
  name                String?
  role                UserRole      @default(VENDOR)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  companyName         String?
  ueiNumber           String?
  socioEconomicStatus String[]
  pricingData         PricingData[]
  proposals           Proposal[]
  questions           Question[]

  @@map("users")
}

model Solicitation {
  id                 String             @id @default(cuid())
  number             String             @unique
  title              String
  agency             String
  description        String
  questionCutoffDate DateTime?
  proposalCutoffDate DateTime?
  status             SolicitationStatus @default(OPEN)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  evaluationPeriods  Json?
  clins              Clin[]
  periods            Period[]
  proposals          Proposal[]
  questions          Question[]

  @@map("solicitations")
}

model Clin {
  id             String        @id @default(cuid())
  name           String
  description    String
  pricingModel   PricingModel
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  solicitationId String
  periodId       String
  period         Period        @relation(fields: [periodId], references: [id])
  solicitation   Solicitation  @relation(fields: [solicitationId], references: [id], onDelete: Cascade)
  pricingData    PricingData[]

  @@map("clins")
}

model Proposal {
  id                   String         @id @default(cuid())
  status               ProposalStatus @default(SUBMITTED)
  submissionDate       DateTime       @default(now())
  notes                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  vendorId             String
  solicitationId       String
  pastPerformanceFiles Json?
  technicalFiles       Json?
  solicitation         Solicitation   @relation(fields: [solicitationId], references: [id], onDelete: Cascade)
  vendor               User           @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("proposals")
}

model PricingData {
  id           String   @id @default(cuid())
  basePrice    Decimal?
  laborHours   Int?
  laborRate    Decimal?
  materialCost Decimal?
  indirectRate Decimal?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clinId       String
  vendorId     String
  clin         Clin     @relation(fields: [clinId], references: [id], onDelete: Cascade)
  vendor       User     @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([clinId, vendorId])
  @@map("pricing_data")
}

model Period {
  id             String       @id @default(cuid())
  name           String
  type           PeriodType
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  solicitationId String
  clins          Clin[]
  solicitation   Solicitation @relation(fields: [solicitationId], references: [id], onDelete: Cascade)

  @@map("periods")
}

model Question {
  id              String         @id @default(cuid())
  question        String
  answer          String?
  status          QuestionStatus @default(DRAFT)
  dateAsked       DateTime       @default(now())
  dateAnswered    DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  vendorId        String
  solicitationId  String
  datePosted      DateTime?
  dateSubmitted   DateTime?
  isAnswerDraft   Boolean        @default(true)
  isQuestionDraft Boolean        @default(true)
  solicitation    Solicitation   @relation(fields: [solicitationId], references: [id], onDelete: Cascade)
  vendor          User           @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("questions")
}

enum UserRole {
  VENDOR
  ADMIN
}

enum SolicitationStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum PricingModel {
  FFP
  TM
  CR
}

enum ProposalStatus {
  SUBMITTED
  UNDER_REVIEW
  AWARDED
  REJECTED
}

enum PeriodType {
  BASE
  OPTION
}

enum QuestionStatus {
  DRAFT
  SUBMITTED
  ANSWERED
  POSTED
}
